# ruff: noqa: ERA001
# generated by datamodel-codegen:
#   filename:  temp.json
from pydantic import BaseModel, ConfigDict, Field


class Child(BaseModel):
    ConfigDict(extra="forbid")
    title: str
    retail_price: None = Field(..., alias="retailPrice")
    is_trial: bool = Field(..., alias="isTrial")
    duration_days: int = Field(..., alias="durationDays")
    retail_price_value: None = Field(..., alias="retailPriceValue")
    field__typename: str = Field(..., alias="__typename")


class PlanOffer(BaseModel):
    ConfigDict(extra="forbid")
    title: str
    retail_price: str | None = Field(..., alias="retailPrice")
    is_trial: bool = Field(..., alias="isTrial")
    duration_days: int = Field(..., alias="durationDays")
    retail_price_value: float | None = Field(..., alias="retailPriceValue")
    children: list[Child]
    field__typename: str = Field(..., alias="__typename")


class Package(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    package_id: int = Field(..., alias="packageId")
    clear_name: str = Field(..., alias="clearName")
    short_name: str = Field(..., alias="shortName")
    technical_name: str = Field(..., alias="technicalName")
    icon: str
    icon_wide: str = Field(..., alias="iconWide")
    plan_offers: list[PlanOffer] = Field(..., alias="planOffers")
    field__typename: str = Field(..., alias="__typename")


class Plan(BaseModel):
    ConfigDict(extra="forbid")
    title: str
    retail_price: str | None = Field(..., alias="retailPrice")
    is_trial: bool = Field(..., alias="isTrial")
    duration_days: int = Field(..., alias="durationDays")
    retail_price_value: float | None = Field(..., alias="retailPriceValue")
    children: list[Child]
    field__typename: str = Field(..., alias="__typename")


class FlatrateItem(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    presentation_type: str = Field(..., alias="presentationType")
    monetization_type: str = Field(..., alias="monetizationType")
    new_element_count: int = Field(..., alias="newElementCount")
    retail_price: None = Field(..., alias="retailPrice")
    retail_price_value: None = Field(..., alias="retailPriceValue")
    currency: str
    last_change_retail_price_value: None = Field(
        ...,
        alias="lastChangeRetailPriceValue",
    )
    type: str
    country: str
    package: Package
    plans: list[Plan]
    standard_web_url: str = Field(..., alias="standardWebURL")
    pre_affiliated_standard_web_url: None = Field(
        ...,
        alias="preAffiliatedStandardWebURL",
    )
    stream_url: None = Field(..., alias="streamUrl")
    stream_url_external_player: None = Field(..., alias="streamUrlExternalPlayer")
    element_count: int = Field(..., alias="elementCount")
    available_to: str | None = Field(..., alias="availableTo")
    subtitle_languages: list[str] = Field(..., alias="subtitleLanguages")
    video_technology: list[str] = Field(..., alias="videoTechnology")
    audio_technology: list[str] = Field(..., alias="audioTechnology")
    audio_languages: list[str] = Field(..., alias="audioLanguages")
    field__typename: str = Field(..., alias="__typename")


class Package1(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    package_id: int = Field(..., alias="packageId")
    clear_name: str = Field(..., alias="clearName")
    short_name: str = Field(..., alias="shortName")
    technical_name: str = Field(..., alias="technicalName")
    icon: str
    icon_wide: str = Field(..., alias="iconWide")
    plan_offers: list = Field(..., alias="planOffers")
    field__typename: str = Field(..., alias="__typename")


class BuyItem(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    presentation_type: str = Field(..., alias="presentationType")
    monetization_type: str = Field(..., alias="monetizationType")
    new_element_count: int = Field(..., alias="newElementCount")
    retail_price: str = Field(..., alias="retailPrice")
    retail_price_value: float = Field(..., alias="retailPriceValue")
    currency: str
    last_change_retail_price_value: None = Field(
        ...,
        alias="lastChangeRetailPriceValue",
    )
    type: str
    country: str
    package: Package1
    plans: list
    standard_web_url: str = Field(..., alias="standardWebURL")
    pre_affiliated_standard_web_url: None = Field(
        ...,
        alias="preAffiliatedStandardWebURL",
    )
    stream_url: None = Field(..., alias="streamUrl")
    stream_url_external_player: None = Field(..., alias="streamUrlExternalPlayer")
    element_count: int = Field(..., alias="elementCount")
    available_to: None = Field(..., alias="availableTo")
    subtitle_languages: list = Field(..., alias="subtitleLanguages")
    video_technology: list = Field(..., alias="videoTechnology")
    audio_technology: list = Field(..., alias="audioTechnology")
    audio_languages: list[str] = Field(..., alias="audioLanguages")
    field__typename: str = Field(..., alias="__typename")
    offer_seasons: None = Field(..., alias="offerSeasons")
    min_retail_price: None = Field(..., alias="minRetailPrice")


class PlanOffer1(BaseModel):
    ConfigDict(extra="forbid")
    title: str
    retail_price: str | None = Field(..., alias="retailPrice")
    is_trial: bool = Field(..., alias="isTrial")
    duration_days: int = Field(..., alias="durationDays")
    retail_price_value: float | None = Field(..., alias="retailPriceValue")
    children: list[Child]
    field__typename: str = Field(..., alias="__typename")


class Package2(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    package_id: int = Field(..., alias="packageId")
    clear_name: str = Field(..., alias="clearName")
    short_name: str = Field(..., alias="shortName")
    technical_name: str = Field(..., alias="technicalName")
    icon: str
    icon_wide: str = Field(..., alias="iconWide")
    plan_offers: list[PlanOffer1] = Field(..., alias="planOffers")
    field__typename: str = Field(..., alias="__typename")


class Plan1(BaseModel):
    ConfigDict(extra="forbid")
    title: str
    retail_price: str | None = Field(..., alias="retailPrice")
    is_trial: bool = Field(..., alias="isTrial")
    duration_days: int = Field(..., alias="durationDays")
    retail_price_value: float | None = Field(..., alias="retailPriceValue")
    children: list[Child]
    field__typename: str = Field(..., alias="__typename")


class FreeItem(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    presentation_type: str = Field(..., alias="presentationType")
    monetization_type: str = Field(..., alias="monetizationType")
    new_element_count: int = Field(..., alias="newElementCount")
    retail_price: None = Field(..., alias="retailPrice")
    retail_price_value: None = Field(..., alias="retailPriceValue")
    currency: str
    last_change_retail_price_value: None = Field(
        ...,
        alias="lastChangeRetailPriceValue",
    )
    type: str
    country: str
    package: Package2
    plans: list[Plan1]
    standard_web_url: str = Field(..., alias="standardWebURL")
    pre_affiliated_standard_web_url: None = Field(
        ...,
        alias="preAffiliatedStandardWebURL",
    )
    stream_url: None = Field(..., alias="streamUrl")
    stream_url_external_player: None = Field(..., alias="streamUrlExternalPlayer")
    element_count: int = Field(..., alias="elementCount")
    available_to: None = Field(..., alias="availableTo")
    subtitle_languages: list[str] = Field(..., alias="subtitleLanguages")
    video_technology: list[str] = Field(..., alias="videoTechnology")
    audio_technology: list = Field(..., alias="audioTechnology")
    audio_languages: list[str] = Field(..., alias="audioLanguages")
    field__typename: str = Field(..., alias="__typename")


class Node(BaseModel):
    ConfigDict(extra="forbid")
    id: str
    field__typename: str = Field(..., alias="__typename")
    offer_count: int = Field(..., alias="offerCount")
    max_offer_updated_at: str = Field(..., alias="maxOfferUpdatedAt")
    offers_history: list = Field(..., alias="offersHistory")
    flatrate: list[FlatrateItem]
    buy: list[BuyItem]
    rent: list
    free: list[FreeItem]
    fast: list
    bundles: list


class Data(BaseModel):
    ConfigDict(extra="forbid")
    node: Node


class ModelItem(BaseModel):
    ConfigDict(extra="forbid")
    data: Data
