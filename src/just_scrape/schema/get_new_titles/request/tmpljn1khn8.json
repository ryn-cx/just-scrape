{
  "operationName": "GetNewTitles",
  "variables": {
    "first": 10,
    "pageType": "NEW",
    "date": "2025-09-04",
    "filter": {
      "ageCertifications": [],
      "excludeGenres": [],
      "excludeProductionCountries": [],
      "objectTypes": [],
      "productionCountries": [],
      "subgenres": [],
      "genres": [],
      "packages": ["amp"],
      "excludeIrrelevantTitles": false,
      "presentationTypes": [],
      "monetizationTypes": []
    },
    "language": "en",
    "country": "US",
    "priceDrops": false,
    "platform": "WEB",
    "showDateBadge": false,
    "availableToPackages": ["amp"]
  },
  "query": "query GetNewTitles($country: Country!, $date: Date!, $language: Language!, $filter: TitleFilter, $after: String, $first: Int! = 10, $profile: PosterProfile, $format: ImageFormat, $priceDrops: Boolean!, $platform: Platform!, $bucketType: NewDateRangeBucket, $pageType: NewPageType! = NEW, $showDateBadge: Boolean!, $availableToPackages: [String!]) {\n  newTitles(\n    country: $country\n    date: $date\n    filter: $filter\n    after: $after\n    first: $first\n    priceDrops: $priceDrops\n    bucketType: $bucketType\n    pageType: $pageType\n  ) {\n    totalCount\n    edges {\n      ...NewTitleGraphql\n      __typename\n    }\n    pageInfo {\n      endCursor\n      hasPreviousPage\n      hasNextPage\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment NewTitleGraphql on NewTitlesEdge {\n  cursor\n  newOffer(platform: $platform) {\n    ...NewWatchNowOffer\n    __typename\n  }\n  node {\n    __typename\n    ... on MovieOrSeason {\n      id\n      objectId\n      objectType\n      content(country: $country, language: $language) {\n        title\n        shortDescription\n        fullPath\n        scoring {\n          imdbVotes\n          imdbScore\n          tmdbPopularity\n          tmdbScore\n          tomatoMeter\n          certifiedFresh\n          __typename\n        }\n        posterUrl(profile: $profile, format: $format)\n        runtime\n        genres {\n          translation(language: $language)\n          __typename\n        }\n        ... on SeasonContent {\n          seasonNumber\n          __typename\n        }\n        upcomingReleases @include(if: $showDateBadge) {\n          releaseDate\n          package {\n            id\n            shortName\n            __typename\n          }\n          releaseCountDown(country: $country)\n          __typename\n        }\n        isReleased\n        __typename\n      }\n      availableTo(\n        country: $country\n        platform: $platform\n        packages: $availableToPackages\n      ) @include(if: $showDateBadge) {\n        availableCountDown(country: $country)\n        package {\n          id\n          shortName\n          __typename\n        }\n        availableToDate\n        __typename\n      }\n      ... on Movie {\n        likelistEntry {\n          createdAt\n          __typename\n        }\n        dislikelistEntry {\n          createdAt\n          __typename\n        }\n        seenlistEntry {\n          createdAt\n          __typename\n        }\n        watchlistEntryV2 {\n          createdAt\n          __typename\n        }\n        __typename\n      }\n      ... on Season {\n        likelistEntry {\n          createdAt\n          __typename\n        }\n        dislikelistEntry {\n          createdAt\n          __typename\n        }\n        show {\n          __typename\n          id\n          objectId\n          objectType\n          content(country: $country, language: $language) {\n            title\n            shortDescription\n            fullPath\n            scoring {\n              imdbVotes\n              imdbScore\n              tmdbPopularity\n              tmdbScore\n              __typename\n            }\n            posterUrl(profile: $profile, format: $format)\n            runtime\n            genres {\n              translation(language: $language)\n              __typename\n            }\n            __typename\n          }\n          likelistEntry {\n            createdAt\n            __typename\n          }\n          dislikelistEntry {\n            createdAt\n            __typename\n          }\n          watchlistEntryV2 {\n            createdAt\n            __typename\n          }\n          seenState(country: $country) {\n            progress\n            __typename\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n  __typename\n}\n\nfragment NewWatchNowOffer on Offer {\n  ...WatchNowOffer\n  lastChangeRetailPrice(language: $language)\n  lastChangePercent\n  __typename\n}\n\nfragment WatchNowOffer on Offer {\n  __typename\n  id\n  standardWebURL\n  preAffiliatedStandardWebURL\n  streamUrl\n  streamUrlExternalPlayer\n  package {\n    id\n    icon\n    packageId\n    clearName\n    shortName\n    technicalName\n    iconWide(profile: S160)\n    hasRectangularIcon(country: $country, platform: WEB)\n    __typename\n  }\n  retailPrice(language: $language)\n  retailPriceValue\n  lastChangeRetailPriceValue\n  currency\n  presentationType\n  monetizationType\n  availableTo\n  dateCreated\n  newElementCount\n}\n"
}
