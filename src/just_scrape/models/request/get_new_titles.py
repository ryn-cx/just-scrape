# generated by datamodel-codegen:
#   filename:  <dict>

from __future__ import annotations

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Filter(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    age_certifications: list = Field(..., alias="ageCertifications")
    exclude_genres: list = Field(..., alias="excludeGenres")
    exclude_production_countries: list = Field(..., alias="excludeProductionCountries")
    object_types: list = Field(..., alias="objectTypes")
    production_countries: list = Field(..., alias="productionCountries")
    subgenres: list
    genres: list
    packages: list[str]
    exclude_irrelevant_titles: bool = Field(..., alias="excludeIrrelevantTitles")
    presentation_types: list = Field(..., alias="presentationTypes")
    monetization_types: list = Field(..., alias="monetizationTypes")


class Variables(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first: int
    page_type: str = Field(..., alias="pageType")
    date: AwareDatetime
    filter: Filter
    language: str
    country: str
    price_drops: bool = Field(..., alias="priceDrops")
    platform: str
    show_date_badge: bool = Field(..., alias="showDateBadge")
    available_to_packages: list[str] = Field(..., alias="availableToPackages")
    after: str | None = None


class ModelItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    operation_name: str = Field(..., alias="operationName")
    variables: Variables
    query: str
